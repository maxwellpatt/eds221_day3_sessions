---
title: "EDS221 Day 3 Sessions"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
```

```{r}
temperature <- 97.2

if (temperature > 97) {
  print("Temperature warning")
} else 
    print("No warning")

```

Create an if else statement for blue whale length. Create a variable blue whale, which has a value of 40 meters. Create an if-else statement that returns "GIANT" if the length exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length is \<= 20

```{r}
blue_whale_length <- 40

if (blue_whale_length > 35) {
  print("GIANT")
} else if (20 <= blue_whale_length & blue_whale_length <= 35) {
  print("MEDIUM")
} else
  print("SMALL")
```

Let's say we are gonna be doing some experimental coding. I wanna try something out that isn't pushing the changes back to main without a review and making sure things are testable. So, I want to create... a branch!

We can do this through the git tab. It's those purple box thingees next to the main dropdown in the top right of RStudio.

In terminal: git checkout -B "name" --\> creates a new branch (-B) and switches over to it (checkout)

At this point, the branch is local. We need to make a remove version of the branch.

git push -u origin "name" --\> syncs the local branch with the remote branch

```{r}
housing_type <- "single"

switch(housing_type, 
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100"))
```

## For loops

```{r}
height <- c(60, 50, 55, 70, 90, 84)

for (i in seq_along(height)) {
  half_height <- height[i] / 2
  print(half_height)
}

## For each value in the height vector, return the sum of the value and the one right after 

for (i in seq_along(height) - 1) {
  height_sum <- height[i] + height[i+1]
  print(height_sum)
}

## Write a for loop that calculates the value of height for each element divided by the mean of the entire height vector

height_mean <- mean(height)

for (i in seq_along(height)) {
  std_height <- height[i] / height_mean
  print(std_height)
}
```

### AFTERNOON

## Functional programming for easier iteration

Use *apply()* to iterate over rows or columns. MARGIN = 1 is rows, and MARGIN = 2 is columns

```{r}
# the two lines below are equivalent
# apply(X = mtcars, MARGIN = 2, FUN = median)
# apply(mtcars, 2, median)
```

Starter: find mean flipper length of penguins by species

```{r}
penguins %>% 
  group_by(species, sex, island) %>% 
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE), 
            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE))
  
```

group_by summary is going to be used A LOT
